---
import { SITE } from '~/config.mjs';
import { getCanonical, getHomePermalink } from '~/utils/permalinks';
import Layout from '~/layouts/PageLayout2.astro';
import { Icon } from 'astro-icon';
import Installation from './installation.md';
import Addrbook from './addrbook.md';
import API from './api.md';
import CheatSheet from './cheatsheet.md';
import Genesis from './genesis.md';
import Peers from './peers.md';
import RPC from './rpc.md';
import Dashboard from './dashboard.md';
import Snapshot from './snapshot.md';
import Upgrade from './upgrade.md';

const name= 'Selfchain';
const icon = '/img/selfchain.jpg';
const network= 'Mainnet';
const chain= 'self-1';
const version= '';
const stake= 'https://explorer.sychonix.com/selfchain-mainnet/staking/selfvaloper1sfnk4yqsvkpta82lfcfyas9txvv2lafdd5s6nv';
 const social = [
  { label: 'Twitter', icon: 'tabler:brand-twitter', href: 'https://twitter.com/selfchainxyz' },
  { label: 'Discord', icon: 'tabler:brand-discord', href: 'https://discord.gg/selfchainxyz' },
  { label: 'Chrome',  icon: 'tabler:brand-chrome', href: 'https://selfchain.xyz' },
];


const meta = {
  title: SITE.title,
  description: SITE.description,
  canonical: getCanonical(getHomePermalink()),
};
const combinedMenu = [
  { title: 'Network Overview', path: 'dashboard', component: Dashboard, type: 'item' },
  { title: 'Installation', path: 'installation', component: Installation, type: 'item' },
  { title: 'Upgrade', path: 'upgrade', component: Upgrade, type: 'item' },
  {
    title: 'Sync',
    items: [
      { title: 'Peers', path: 'peers', component: Peers, icon: 'tabler:users' },
      { title: 'Snapshot', path: 'snap', component: Snapshot, icon: 'tabler:camera' },
      { title: 'Addrbook', path: 'addrbook', component: Addrbook, icon: 'tabler:book' },
      { title: 'Genesis', path: 'genesis', component: Genesis, icon: 'tabler:tree' },
    ],
    type: 'submenu',
  },
  {
    title: 'Public API',
    items: [
      { title: 'API', path: 'api', component: API, icon: 'tabler:api-app' },
      { title: 'RPC', path: 'rpc', component: RPC, icon: 'tabler:exchange' },
    ],
    type: 'submenu',
  },
  { title: 'CLI Cheatsheet', path: 'cheatsheet', component: CheatSheet, type: 'item' },
];

---

<Layout {meta}>
  <section>
    <div class="max-w-6xl mx-auto px-4 sm:px-6">
      <div class="py-10 md:py-20">
        
<!-- Top-Bar layout -->
<div class="top-bar flex items-center justify-between px-4 py-2">
  <a href="/mainnet/selfchain" class="flex items-center">
    <img src={icon} alt={name} class="w-8 h-8 inline-block rounded-full object-cover mr-0" />
    <span class="text-md font-bold">{name} - {network}</span>
  </a>
  <div class="flex flex-col md:flex-row items-start md:items-center space-x-0 md:space-x-2 text-sm"> 
    <span><strong>Chain ID:</strong> {chain}</span> 
    <span id="block-height"><strong>Block Height:</strong> Loading...</span>
    <div class="rpc-status flex items-center" style="display: flex; align-items: center; gap: 4px;">
      <strong style="margin-right: 4px;">RPC Status:</strong>
      <span class="status-dot" style="width: 0.7rem; height: 0.7rem; background-color: #10b981; border-radius: 50%; animation: pulse 1.5s infinite;"></span>
    </div>     
  </div>  
</div>


        <!-- Hamburger menu for mobile -->
        <div class="mobile-menu md:hidden flex justify-end">
          <button id="hamburger-button" class="p-2">
            <Icon name="tabler:menu" class="w-8 h-8 text-white" />
          </button>
        </div>

        <!-- Close button for mobile menu -->
        <div id="mobile-close-button" class="hidden md:hidden p-2 absolute right-4 top-4 z-50">
 <!-- Icon removed as requested -->        </div>

        <!-- Tab layout: Sidebar and Content -->
        <div class="flex flex-col md:flex-row md:items-start">
          
          <!-- Sidebar (left side) -->
          <div id="sidebar" class="tabs flex-shrink-0 md:block hidden">
            <div class="submenu-container">
              {combinedMenu.map((menu, index) => {
                if (menu.path === 'submenu') {
                  // Sembunyikan Dashboard dengan kelas khusus
                  return (
                    <button
                      class="tab-button hidden-dashboard"
                      onclick={`showTabContent('${index}')`}
                      key={menu.title}
                      data-index={index}
                      data-path={menu.path}
                    >
                      <span class="icon-arrow inline-block mr-2">▸</span>
                      {menu.title}
                    </button>
                  );
                } else if (menu.type === 'submenu') {
                  return (
                    <div key={menu.title}>
                      <button class="submenu-toggle" onclick={`toggleSubmenu(${index})`}>
                        <span class={`icon-arrow inline-block mr-2 ${index === 0 ? 'open' : ''}`}>▸</span>
                        {menu.title}
                      </button>
                      <div class={`submenu ${index === 0 ? 'open' : ''}`} id={`submenu-${index}`}>
                        {menu.items.map((subItem, subIndex) => (
                          <button
                            class={`tab-button submenu-item ${subItem.path === 'dashboard' ? 'active' : ''}`}
                            onclick={`showTabContent('${index}-${subIndex}')`}
                            key={subItem.title}
                            data-index={`${index}-${subIndex}`}
                            data-path={subItem.path}
                          >
                            {subItem.icon && <Icon name={subItem.icon} class="w-4 h-4 inline-block mr-1" />}
                            {subItem.title}
                          </button>
                        ))}
                      </div>
                    </div>
                  );
                } else {
                  return (
                    <button
                      class={`tab-button ${index === 0 ? 'active' : ''}`}
                      onclick={`showTabContent('${index}')`}
                      key={menu.title}
                      data-index={index}
                      data-path={menu.path}
                    >
                      <span class="icon-arrow inline-block mr-2">▸</span>
                      {menu.title}
                    </button>
                  );
                }
              })}

              <!-- Social Links Section -->
              <div class="social-links mt-4 pt-2 border-t border-gray-700 flex justify-center">
                {social.map(link => (
                  <a href={link.href} target="_blank" class="flex items-center text-white hover:text-blue-500 transition mx-2">
                    <Icon name={link.icon} class="w-6 h-6" />
                  </a>
                ))}
              </div>
            </div>
          </div>        

          <!-- Content (right side) -->
          <div class="content flex-1 mt-4 md:mt-0 md:ml-4">
            {combinedMenu.flatMap((menu, menuIndex) => 
              menu.type === 'submenu' ? (
                menu.items.map((subItem, subIndex) => (
                  <div
                    class={`tab-content ${menuIndex === 0 && subIndex === 0 ? 'active' : ''}`}
                    id={`tab-content-${menuIndex}-${subIndex}`}
                    key={subItem.title}
                  >
                    <h2 class="text-xl font-bold mb-4">{subItem.title}</h2>
                    {subItem.component && <subItem.component />}
                  </div>
                ))
              ) : (
                <div class={`tab-content ${menuIndex === 0 ? 'active' : ''}`} id={`tab-content-${menuIndex}`} key={menu.title}>
                  <h2 class="text-xl font-bold mb-4">{menu.title}</h2>
                  {menu.component && <menu.component />}
                </div>
              )
            )}
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');
  const submenuToggles = document.querySelectorAll('.submenu-toggle');
  const submenuItems = document.querySelectorAll('.submenu-item');
  const submenus = document.querySelectorAll('.submenu');
  const hamburgerButton = document.getElementById('hamburger-button');
  const sidebar = document.getElementById('sidebar');
  const closeButton = document.getElementById('mobile-close-button');

  // Function to show tab content
  function showTabContent(index) {
    // Ensure all tabs and content are reset
    tabButtons.forEach((btn) => btn.classList.remove('active'));
    tabContents.forEach((content) => content.classList.remove('active'));

    // Activate the selected tab and corresponding content
    tabButtons[index].classList.add('active');
    if (tabContents[index]) {
      tabContents[index].classList.add('active');
    }

    // Update the URL based on the tab content being shown
    const selectedPath = tabButtons[index].dataset.path;
    if (selectedPath === 'dashboard') {
      history.pushState(null, '', '/mainnet/selfchain'); // Only use base path for Dashboard
    } else {
      history.pushState(null, '', `/mainnet/selfchain/${selectedPath}`);
    }
  }

  // Function to toggle submenu and rotate icon
  function toggleSubmenu(index) {
    submenus.forEach((submenu, i) => {
      const arrowIcon = submenuToggles[i].querySelector('.icon-arrow');
      if (i === index) {
        submenu.classList.toggle('open');
        arrowIcon.classList.toggle('rotate-90');
        submenuToggles[i].classList.toggle('active'); // Toggle active state on submenu title
      } else {
        submenu.classList.remove('open');
        arrowIcon.classList.remove('rotate-90');
        submenuToggles[i].classList.remove('active'); // Remove active state from other submenu titles
      }
    });
  }

  // Function to handle hover and active states
  function handleHoverAndActiveStates() {
    // Remove active class from all buttons
    tabButtons.forEach(button => {
      if (!button.classList.contains('submenu-item')) { // Only apply to non-submenu items
        button.addEventListener('click', () => {
          // Remove active state from all buttons and submenus
          tabButtons.forEach(btn => btn.classList.remove('active'));
          submenuToggles.forEach(toggle => toggle.classList.remove('active'));
          
          // Add active state to the clicked button
          button.classList.add('active');
        });
      }
    });

    submenuToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        // Remove active state from all buttons and submenu items
        tabButtons.forEach(btn => btn.classList.remove('active'));
        
        // Toggle active state on the clicked submenu title
        submenuToggles.forEach(tog => tog.classList.remove('active'));
        toggle.classList.add('active');
      });
    });

    // No need to add active state to submenu items, keeping it clean
  }

  // Close all submenus by default
  submenus.forEach((submenu) => submenu.classList.remove('open'));
  submenuToggles.forEach((toggle) => {
    const arrowIcon = toggle.querySelector('.icon-arrow');
    arrowIcon.classList.remove('rotate-90');
  });

  // Function to toggle sidebar with animation
  function toggleSidebar() {
    if (sidebar.classList.contains('show')) {
      sidebar.classList.remove('show');
      sidebar.classList.add('hide');
      closeButton.classList.add('hidden'); // Hide close button when menu is closed
    } else {
      sidebar.classList.remove('hide');
      sidebar.classList.add('show');
      closeButton.classList.remove('hidden'); // Show close button when menu is open
    }
  }

  // Event listener for tab buttons
  tabButtons.forEach((button, index) => {
    button.addEventListener('click', () => showTabContent(index));
  });

  // Event listeners for submenu toggles
  submenuToggles.forEach((toggle, index) => {
    toggle.addEventListener('click', () => toggleSubmenu(index));
  });

  // Event listener for hamburger button
  hamburgerButton.addEventListener('click', toggleSidebar);

  // Event listener for close button on mobile
  closeButton.addEventListener('click', toggleSidebar);

  // Event listener to close sidebar when clicking outside
  document.addEventListener('click', (event) => {
    const isClickInsideSidebar = sidebar.contains(event.target);
    const isClickOnHamburger = hamburgerButton.contains(event.target);

    // If the click is outside the sidebar and not on the hamburger button, close the sidebar
    if (!isClickInsideSidebar && !isClickOnHamburger && sidebar.classList.contains('show')) {
      sidebar.classList.remove('show');
      sidebar.classList.add('hide'); // Trigger animation for hiding
      closeButton.classList.add('hidden'); // Hide close button when menu is closed
    }
  });


    // Fetch and update Block Height
    async function fetchBlockHeight() {
  try {
    const cachedHeight = localStorage.getItem('blockHeight');
    const lastFetchTime = localStorage.getItem('lastFetchTime');
    const currentTime = new Date().getTime();

    // Check if cache is older than 10 minutes
    if (cachedHeight && lastFetchTime && currentTime - lastFetchTime < 30000) {
      document.getElementById('block-height').innerHTML = `<strong>Block Height:</strong> ${cachedHeight}`;
      return;
    }

    const response = await fetch('https://selfchain.rpc.nodex.one/status');
    const data = await response.json();
    const latestBlockHeight = data.result.sync_info.latest_block_height;

    // Update the block height in localStorage
    localStorage.setItem('blockHeight', latestBlockHeight);
    localStorage.setItem('lastFetchTime', currentTime);

    // Update only the latest block height
    document.getElementById('block-height').innerHTML = `<strong>Block Height:</strong> ${latestBlockHeight}`;
  } catch (error) {
    console.error('Error fetching block height:', error);
  }
}
  // Update block height every 5 seconds
  setInterval(fetchBlockHeight, 6000);

  // Handle initial tab state based on URL
  const currentPath = window.location.pathname.split('/').pop();
  const dashboardButton = [...tabButtons].find(button => button.dataset.path === 'dashboard');
  const dashboardIndex = [...tabButtons].indexOf(dashboardButton);

  // Set the default tab to "Dashboard" if no specific tab is selected or path is empty
  if (!currentPath || currentPath === 'selfchain') {
    showTabContent(dashboardIndex); // Show "Dashboard" by default
  } else {
    const currentIndex = [...tabButtons].findIndex(button => button.dataset.path === currentPath);
    if (currentIndex !== -1) {
      showTabContent(currentIndex);
    } else {
      showTabContent(dashboardIndex); // Fallback to "Dashboard" if the path is not recognized
    }
  }

  // Call function to handle hover and active states
  handleHoverAndActiveStates();
});
  </script>
  


<style>
/* Header Section Styles */
.header-section {
  background-color: #0f172a;
  color: #ffffff;
  padding: 0.5rem 1rem;
  margin: 1rem 0;
  border-radius: 1rem;
  display: flex;
  align-items: center;
  justify-content: flex-start;
}
/* Style untuk item menu aktif dan hover */
/* Style untuk judul menu utama dan judul submenu saat hover dan aktif */
/* Style untuk judul menu utama dan judul submenu saat hover dan aktif */
.tabs button:not(.submenu-item):hover,
.tabs button:not(.submenu-item).active {
  background-color: rgb(23 37 84);/* Warna latar belakang saat hover atau aktif */
  color: #ffffff; /* Warna teks saat hover atau aktif */
  border-radius: 0.5rem; /* 8px */
}

/* Menghilangkan hover dan active state dari item submenu */
.submenu-item:hover,
.submenu-item.active {
  background-color: transparent; /* Tidak ada perubahan warna */
  color: #ffffff; /* Warna teks tetap */
}


/* Top Bar Styles */
.top-bar {
  background-color: #0f172a;
  color: #ffffff;
  padding: 0.75rem 1.5rem;
  margin-bottom: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 1rem;
}

.top-bar .flex.items-center {
  gap: 1rem;
}

.top-bar .flex.items-center span {
  margin: 0;
  line-height: 1.5;
}

/* RPC Status Styles */
.rpc-status {
  display: flex;
  align-items: center;
  gap: 0.2rem;
}

.rpc-status strong {
  margin: 0;
}

.hidden-dashboard {
  display: none !important;
}

.status-dot {
  width: 0.7rem;
  height: 0.7rem;
  background-color: #10b981;
  border-radius: 50%;
  animation: pulse 1.5s infinite;
  margin: 0;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
  }
  50% {
    transform: scale(1.2);
    box-shadow: 0 0 0 0.4rem rgba(16, 185, 129, 0);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
  }
}

/* Tabs Styles */
.tabs {
  width: 100%;
  max-width: 250px;
  background-color: #0f172a;
  border-radius: 1rem;
  padding: 0.5rem;
  text-align: left;
  overflow-y: visible;
  box-sizing: border-box;
  border-color: rgb(250, 250, 250);
  transition: max-height 0.3s ease;
}

.tabs button .icon-arrow,
.tab-button .icon-arrow {
  font-size: 1rem;
  transition: transform 0.2s ease-in-out;
  display: inline-block;
  margin-right: 5px;
}

.tabs button.active {
  position: relative;
}

/* Submenu Styles */
.submenu-container {
  position: relative;
  z-index: 2;
}

.submenu {
  display: none;
  background-color: transparent;
  border-left: 2px solid rgb(62, 106, 167);
  margin-top: 0.1rem;
  padding: 5px 0 5px 10px;
  overflow-y: auto;
  max-height: 150px;
  font-size: 0.875rem;
  border-radius: 4px;
  transition: max-height 0.3s ease;
}

.submenu.open {
  display: block;
  max-height: none;
}

.tabs button {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 10px;
  background-color: transparent;
  border: none;
  text-align: left;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  box-sizing: border-box;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  height: 45px;
  font-size: 0.875rem;
  border-radius: 4px;
  margin-bottom: 4px;
}

/* Submenu Toggle Styles */
.submenu-toggle {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 10px;
  background-color: #482d2d;
  border: none;
  text-align: left;
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
  font-size: 0.875rem;
  margin-bottom: 4px;
}

.submenu-toggle:hover {
  background-color: rgba(13, 114, 255, 0.2);
}

/* Content Styles */
.content {
  width: 100%;
  padding: 1rem;
  background-color: #0f172a;
  border-radius: 1rem;
  overflow-y: auto;
  box-sizing: border-box;
}

.content .tab-content {
  display: none;
}

.content .tab-content.active {
  display: block;
}

/* Social Links Styles */
.social-links {
  margin-top: 0.5rem;
  padding-top: 0.9rem;
  border-top: 1px solid rgba(255, 255, 255, 0.2);
  display: flex;
  justify-content: center;
}

.social-links a {
  color: white;
  text-decoration: none;
  transition: color 0.2s ease-in-out;
  margin: 0 5px;
}

.social-links a:hover {
  color: rgb(13, 114, 255);
}

/* Icon Arrow Styles */
.icon-arrow {
  transition: transform 0.2s ease-in-out;
}

.rotate-90 {
  transform: rotate(90deg);
}

/* Mobile Menu Styles */
.mobile-menu {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 50;
  margin: 0.5rem;
  right: 9px;
}

#mobile-close-button {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 50;
  margin: 1rem;
}

/* Media Query for Mobile View */
@media (max-width: 768px) {
  .submenu {
    border-left: none;
    padding: 5px 0 5px 15px;
  }

  .tabs {
    display: none;
    position: absolute;
    top: 4rem;
    right: 0;
    width: 250px;
    max-width: 250px;
    height: auto;
    max-height: 400px;
    background-color: #0f172a;
    border-radius: 0.75rem;
    border-color: rgb(250, 250, 250);
    padding: 1rem;
    z-index: 50;
    overflow-y: auto;
    transform: translateX(100%);
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }

  .tabs.show {
    display: block;
    animation: slideInFromRight 0.3s forwards;
  }

  .tabs.hide {
    animation: slideOutToRight 0.3s forwards;
  }

  .top-bar {
    margin-top: 1.8rem;
    margin-bottom: 0;
    flex-direction: column; /* Keep column direction */
    align-items: flex-start;
    padding: 1rem;
  }
  .top-bar .flex.items-center {
    width: 100%;
    justify-content: flex-start;
    margin-bottom: 0.5rem;
  }

  .top-bar .flex.items-center span,
  .top-bar .text-sm span {
    display: block;
    margin: 0;
    line-height: 1.5;
  }

  .top-bar .text-sm {
    display: block; /* Ensure each piece of text is on a new line */
    width: 100%;
    margin-bottom: 0.5rem; /* Space between text elements */
    text-align: left;
  }

  .top-bar a {
    display: flex; /* Flex container for horizontal alignment */
    align-items: center; /* Center align vertically */
    margin-bottom: 1rem; /* Space between icon/name and other info */
    text-align: left;
  }

  .top-bar .rpc-status {
    display: flex; /* Align status horizontally */
    align-items: center;
    margin: 0;
  }
}

/* Slide Animations */
@keyframes slideInFromRight {
  0% {
    transform: translateX(100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOutToRight {
  0% {
    transform: translateX(0);
    opacity: 1;
  }
  100% {
    transform: translateX(100%);
    opacity: 0;
  }
}
</style>
